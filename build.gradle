group 'com.rojel.wesv'
// the following will be replaced by a real version from plugin.yml
// by using grep, awk and sed (Linux programs) when built via Travis CI
version '%PLUGIN_VERSION%'

//import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'eclipse'

//sourceCompatibility = 1.8

ext {
    println("$rootProject.name")
    BUKKIT_API_VERSION = '1.8.8-R0.1-SNAPSHOT'
    WORLDEDIT_VERSION = '6.1'
    PROTOCOLLIB_VERSION = '4.2.0'
    BUILD_DIR = "build/$group"
    FINAL_DIR  = 'Plugins/'
    MAIN_CLASS = "${group}.WorldEditSelectionVisualizer".toString()
}
buildDir = BUILD_DIR

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        java {
            srcDirs = ['src/test']
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name "Spigot"
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name "BungeeCord"
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name "WorldEdit"
        url "http://maven.sk89q.com/artifactory/repo/"
    }
    maven {
        name "ProtocolLib"
    	url "http://repo.dmulloy2.net/content/groups/public/"
    }
    maven {
        name "MockitoBeta"
        url "https://mvnrepository.com/artifact/org.mockito/mockito-all/"
    }
}

dependencies {
    // CGLib
    testCompile group: 'cglib',
                name: 'cglib-nodep',
                version: '3.2.4'

    // EasyMock
    testCompile group: 'org.easymock',
                name: 'easymock',
                version: '3.4'

    // hamcrest
    testCompile group: 'org.hamcrest',
                name: 'hamcrest-all',
                version: '1.3'

    // JavaAssist
    testCompile group: 'org.javassist',
                name: 'javassist',
                version: '3.22.0-CR1'

    // JUnit
    testCompile group: 'junit',
                name: 'junit',
                version: '4.12'

    // Mockito 2 Beta
    testCompile group: 'org.mockito',
                name: 'mockito-all',
                version: '2.0.2-beta'

    // Objenesis
    testCompile group: 'org.objenesis',
                name: 'objenesis',
                version: '2.5.1'

    // PowerMock-API-EasyMock
    testCompile group: 'org.powermock',
                name: 'powermock-api-easymock',
                version: '1.6.5'
    
    // PowerMock-Module-JavaAgenr
    testCompile group: 'org.powermock',
                name: 'powermock-module-javaagent',
                version: '1.6.5'

    // PowerMock-Module-JUnit4
    testCompile group: 'org.powermock',
                name: 'powermock-module-junit4',
                version: '1.6.5'

    // PowerMock-Module-JUnit4-Rule-Agent
    testCompile group: 'org.powermock',
                name: 'powermock-module-junit4-rule-agent',
                version: '1.6.5'

    // PowerMock-Module-testng-agent
    testCompile group: 'org.powermock',
                name: 'powermock-module-testng-agent',
                version: '1.6.5'

    // PowerMock-Mockito-Release
    testCompile group: 'org.powermock',
                name: 'powermock-mockito-release-full',
                version: '1.6.4'

    // WorldEdit
    compile group: 'com.sk89q.worldedit',
            name: 'worldedit-bukkit',
            version: WORLDEDIT_VERSION
    // Spigot API
    compile group: 'org.spigotmc',
            name: 'spigot-api',
            version: BUKKIT_API_VERSION

    // ProtocolLib
    compile group: 'com.comphenix.protocol',
            name: 'ProtocolLib',
            version: PROTOCOLLIB_VERSION
}

buildscript {
    repositories {
        mavenCentral() // or jcenter()
    }
    dependencies {
        classpath 'ch.raffael.pegdown-doclet:pegdown-doclet:1.3'
    }
}

apply plugin: 'ch.raffael.pegdown-doclet'

jar {
   baseName = 'wesv'
   includeEmptyDirs = false
}

task copy(type: Copy) {
    from "${buildDir}/libs"
    into "$FINAL_DIR"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"

        // set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
    doFirst {
      jvmArgs "-noverify"
    }
}

check.dependsOn jacocoTestReport

/*task templates(type: Copy) {
    delete "src/main/resources/config.yml"
    delete "src/main/resources/plugin.yml"
    from "template/plugin.yml"
    into 'src/main/resources'
    filter(ReplaceTokens, tokens: [
            version: version,
            name   : rootProject.name,
            class  : MAIN_CLASS,
            genTime: "#Generated At: ${new Date().format("\'MM/dd/yy~hh:mm-a\'")}".toString(),
    ])
    from "template/config.yml"
    into sourceSets.main.resources.getSrcDirs().getAt(0)
}*/
